name: Check pull request
on:
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - synchronize

jobs:
  tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info

      - name: Test infrastructure with Checkov (bootstrap)
        id: checkov-bootstrap
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/bootstrap
          framework: terraform

      - name: Test infrastructure with Checkov (environment)
        id: checkov-environment
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/environment
          framework: terraform

      - name: Get Terraform version
        id: getterraformversion
        run: echo "::set-output name=version::$(cat terraform/.terraform-version)"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.getterraformversion.outputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Run Unit Tests
        run: ./gradlew clean spotlessCheck build test

      - name: Terraform Format Check
        working-directory: terraform/
        run: terraform fmt -check -recursive

      - name: Terraform Validate (bootstrap)
        working-directory: terraform/bootstrap
        run: |
          terraform init -input=false -backend=false
          terraform validate

      - name: Terraform Validate (environment)
        working-directory: terraform/environment
        run: |
          terraform init -input=false -backend=false
          terraform validate

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_ACCOUNT_PR_DEPLOYER_ARN }}
          role-session-name: github-actions-pr-test-${{ github.run_id }}-${{ github.run_number }}
          aws-region: eu-west-2

      - name: Create Terraform variables
        working-directory: terraform/bootstrap
        run: |
          cat <<EOF > credentials.auto.tfvars
          aws_region="${{ env.AWS_REGION }}"
          aws_access_key_id="${{ env.AWS_ACCESS_KEY_ID }}"
          aws_secret_access_key="${{ env.AWS_SECRET_ACCESS_KEY }}"
          aws_session_token="${{ env.AWS_SESSION_TOKEN }}"
          EOF
          
          cp credentials.auto.tfvars ../environment/

      - name: Terraform Plan (bootstrap)
        id: bootstrapplan
        working-directory: terraform/bootstrap
        run: |
          terraform init -input=false
          terraform plan -no-color
        continue-on-error: true

      - name: Write plan to PR (environment)
        uses: actions/github-script@0.9.0
        env:
          PLAN: "${{ steps.bootstrapplan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for bootstrap ðŸ“– \`${{ steps.bootstrapplan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan (environment)
        id: environmentplan
        working-directory: terraform/environment
        run: |
          mv test-mappings.auto.tfvars test-mappings.tfvars
          mv live-mappings.tfvars live-mappings.auto.tfvars
          rm -rf .terraform/
          terraform init -input=false \
            -backend-config=live-backend.hcl
          terraform plan -no-color
          mv test-mappings.tfvars test-mappings.auto.tfvars
          mv live-mappings.auto.tfvars live-mappings.tfvars
        continue-on-error: true

      - name: Write plan to PR (environment)
        uses: actions/github-script@0.9.0
        env:
          PLAN: "${{ steps.environmentplan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for live environment ðŸ“– \`${{ steps.environmentplan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.bootstrapplan.outcome == 'failure' || steps.environmentplan.outcome == 'failure'
        run: exit 1

  deploy-test-environment:
    runs-on: ubuntu-latest
    needs:
      - tests
    permissions:
      id-token: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Get Terraform version
        id: getterraformversion
        run: echo "::set-output name=version::$(cat terraform/.terraform-version)"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.getterraformversion.outputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_ACCOUNT_PR_DEPLOYER_ARN }}
          role-session-name: github-actions-pr-deploy-${{ github.run_id }}-${{ github.run_number }}
          aws-region: eu-west-2

      - name: Build
        run: ./gradlew clean build -x test

      - name: Build Zip
        run: ./gradlew buildZip

      - name: Copy test ZIP to S3
        run: |
          aws s3 cp build/distributions/accounts.zip s3://mcc-accounts-deployment-20220207000926474500000001/test-accounts.zip

      - name: Create Terraform variables
        working-directory: terraform/environment
        run: |
          cat <<EOF > credentials.auto.tfvars
          aws_region="${{ env.AWS_REGION }}"
          aws_access_key_id="${{ env.AWS_ACCESS_KEY_ID }}"
          aws_secret_access_key="${{ env.AWS_SECRET_ACCESS_KEY }}"
          aws_session_token="${{ env.AWS_SESSION_TOKEN }}"
          EOF

      - name: Deploy bootstrap Terraform
        working-directory: terraform/bootstrap
        env:
          TF_TOKEN: ${{ secrets.TF_TOKEN }}
        run: |
          mv test.tfvars test.auto.tfvars
          terraform init -input=false
          terraform apply -auto-approve

      - name: Deploy test build to AWS
        working-directory: terraform/environment
        env:
          TF_TOKEN: ${{ secrets.TF_TOKEN }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve 

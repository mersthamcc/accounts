name: Check pull request
on:
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - synchronize

jobs:
  tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info

      - name: Test infrastructure with Checkov (core)
        id: checkov-core
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/core
          framework: terraform

      - name: Test infrastructure with Checkov (api)
        id: checkov-api
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/api
          framework: terraform

      - name: Get Terraform version
        id: getterraformversion
        run: echo "::set-output name=version::$(cat terraform/.terraform-version)"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.getterraformversion.outputs.version }}
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Run Unit Tests
        run: ./gradlew clean spotlessCheck build test

      - name: Terraform Format Check
        working-directory: terraform/
        run: terraform fmt -check -recursive

      - name: Terraform Validate (core)
        working-directory: terraform/core
        run: |
          terraform init -input=false -backend=false
          terraform validate

      - name: Terraform Validate (api)
        working-directory: terraform/api
        run: |
          terraform init -input=false -backend=false
          terraform validate

  deploy-test-environment:
    runs-on: ubuntu-latest
    needs:
      - tests
    permissions:
      id-token: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Get Terraform version
        id: getterraformversion
        run: echo "::set-output name=version::$(cat terraform/.terraform-version)"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.getterraformversion.outputs.version }}
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_ACCOUNT_PR_DEPLOYER_ARN }}
          role-session-name: github-actions-pr-deploy-${{ github.run_id }}-${{ github.run_number }}
          aws-region: eu-west-2

      - name: Build
        run: ./gradlew clean build -x test

      - name: Build Zip
        run: ./gradlew buildZip

      - name: Deploy core Terraform
        id: core_deploy
        working-directory: terraform/core
        env:
          TF_VAR_terraform_token: ${{ secrets.TF_TOKEN }}
          TF_VAR_digitalocean_token: ${{ secrets.DO_TOKEN }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var-file test.tfvars
                    
          echo "::set-output name=bucket_name::$(terraform output -raw deployment_bucket_name)"

      - name: Copy test ZIP to S3
        env:
          DEPLOYMENT_BUCKET: ${{ steps.core_deploy.outputs.bucket_name }}
        run: |
          aws s3 cp "build/distributions/accounts.zip" "s3://${DEPLOYMENT_BUCKET}/accounts.zip"

      - name: Deploy test API build to AWS
        working-directory: terraform/api
        env:
          TF_VAR_terraform_token: ${{ secrets.TF_TOKEN }}
          TF_VAR_epos_api_key: ${{ secrets.EPOS_API_KEY }}
          TF_VAR_epos_api_secret: ${{ secrets.EPOS_API_SECRET }}
          TF_VAR_sage_api_client_id: ${{ secrets.SAGE_API_CLIENT_ID }}
          TF_VAR_sage_api_client_secret: ${{ secrets.SAGE_API_CLIENT_SECRET }}
          TF_VAR_digitalocean_token: ${{ secrets.DO_TOKEN }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var-file test-mappings.tfvars

  plan-live-environment:
    runs-on: ubuntu-latest
    needs:
      - tests
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Get Terraform version
        id: getterraformversion
        run: echo "::set-output name=version::$(cat terraform/.terraform-version)"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.getterraformversion.outputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ACCOUNTS_ACCOUNT_PR_DEPLOYER_ARN }}
          role-session-name: github-actions-pr-test-${{ github.run_id }}-${{ github.run_number }}
          aws-region: eu-west-2

      - name: Terraform Plan (core)
        id: coreplan
        working-directory: terraform/core
        env:
          TF_VAR_terraform_token: ${{ secrets.TF_TOKEN }}
          TF_VAR_digitalocean_token: ${{ secrets.DO_TOKEN }}
        run: |
          terraform init -input=false \
            -backend-config=live-backend.hcl

          terraform plan -no-color -var-file live.tfvars
        continue-on-error: true

      - name: Write plan to PR (core)
        uses: actions/github-script@0.9.0
        env:
          PLAN: "${{ steps.coreplan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for core ðŸ“– \`${{ steps.coreplan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan (api)
        id: apiplan
        working-directory: terraform/api
        env:
          TF_VAR_terraform_token: ${{ secrets.TF_TOKEN }}
          TF_VAR_epos_api_key: ${{ secrets.EPOS_API_KEY }}
          TF_VAR_epos_api_secret: ${{ secrets.EPOS_API_SECRET }}
          TF_VAR_sage_api_client_id: ${{ secrets.SAGE_API_CLIENT_ID }}
          TF_VAR_sage_api_client_secret: ${{ secrets.SAGE_API_CLIENT_SECRET }}
          TF_VAR_digitalocean_token: ${{ secrets.DO_TOKEN }}
        run: |
          rm -rf .terraform/
          terraform init -input=false \
            -backend-config=live-backend.hcl
          terraform plan -no-color -var-file live-mappings.tfvars
        continue-on-error: true

      - name: Write plan to PR (api)
        uses: actions/github-script@0.9.0
        env:
          PLAN: "${{ steps.apiplan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for live environment ðŸ“– \`${{ steps.apiplan.outcome }}\`

            **_N.B. This plan doesn't reflect changes to the lambda source._**

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.coreplan.outcome == 'failure' || steps.apiplan.outcome == 'failure'
        run: exit 1

